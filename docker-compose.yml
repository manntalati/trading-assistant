version: '3.8'

services:
  # Database
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: trading-assistant-db
    environment:
      POSTGRES_DB: trading_assistant
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: trading_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d trading_assistant"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: trading-assistant-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend
    container_name: trading-assistant-backend
    environment:
      - DATABASE_URL=postgresql://trading_user:trading_password@timescaledb:5432/trading_assistant
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - NEWS_API_KEY=${NEWS_API_KEY}
    ports:
      - "8000:8000"
    depends_on:
      timescaledb:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app/backend
      - ./db:/app/db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Streamlit)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend
    container_name: trading-assistant-frontend
    environment:
      - BACKEND_URL=http://backend:8000
    ports:
      - "8501:8501"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app/frontend

  # Voice Processing Service
  voice:
    build:
      context: .
      dockerfile: Dockerfile
      target: voice
    container_name: trading-assistant-voice
    environment:
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    ports:
      - "8001:8001"
    volumes:
      - ./voice:/app/voice
      - voice_audio:/app/audio
    depends_on:
      - backend

  # Celery Worker
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: celery-worker
    container_name: trading-assistant-celery-worker
    environment:
      - DATABASE_URL=postgresql://trading_user:trading_password@timescaledb:5432/trading_assistant
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - NEWS_API_KEY=${NEWS_API_KEY}
    depends_on:
      timescaledb:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app/backend
      - ./db:/app/db

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: celery-beat
    container_name: trading-assistant-celery-beat
    environment:
      - DATABASE_URL=postgresql://trading_user:trading_password@timescaledb:5432/trading_assistant
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - NEWS_API_KEY=${NEWS_API_KEY}
    depends_on:
      timescaledb:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app/backend
      - ./db:/app/db

  # Flower (Celery Monitoring)
  flower:
    image: mher/flower:1.0
    container_name: trading-assistant-flower
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery-worker

volumes:
  postgres_data:
  voice_audio:
