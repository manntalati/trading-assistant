{"ast":null,"code":"var _jsxFileName = \"/Users/manntalati/Documents/Projects/trading-assistant/frontend/src/context/TradingContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TradingContext = /*#__PURE__*/createContext();\nconst initialState = {\n  // Market data - matches actual backend watchlist\n  watchlist: ['DE', 'APPL', 'AMD', 'DELL', 'FIG', 'UBER', 'MRVL', 'CSCO', 'VICI', 'PUBM', 'AVD', 'PDSB', 'QQQ', 'VOO'],\n  marketData: {},\n  latestPrices: {},\n  stockDetails: {},\n  selectedStock: null,\n  chartData: {},\n  chartPeriod: '1m',\n  // Task status - reflects actual backend capabilities\n  taskStatus: {\n    dailyDataIngestion: 'idle',\n    lastExecution: null,\n    nextScheduled: null\n  },\n  // System status - accurate to current backend\n  systemStatus: {\n    dataIngestion: 'idle',\n    emailNotifications: 'idle',\n    lastUpdate: null\n  },\n  // User preferences\n  preferences: {\n    autoRefresh: true,\n    notifications: true,\n    theme: 'dark'\n  },\n  // Voice assistant - placeholder for future implementation\n  voiceTranscript: '',\n  voiceResponse: '',\n  isListening: false\n};\nfunction tradingReducer(state, action) {\n  switch (action.type) {\n    case 'SET_MARKET_DATA':\n      return {\n        ...state,\n        marketData: {\n          ...state.marketData,\n          ...action.payload\n        }\n      };\n    case 'SET_LATEST_PRICES':\n      return {\n        ...state,\n        latestPrices: {\n          ...state.latestPrices,\n          ...action.payload\n        }\n      };\n    case 'UPDATE_TASK_STATUS':\n      return {\n        ...state,\n        taskStatus: {\n          ...state.taskStatus,\n          ...action.payload\n        }\n      };\n    case 'SET_SELECTED_STOCK':\n      return {\n        ...state,\n        selectedStock: action.payload\n      };\n    case 'SET_CHART_DATA':\n      return {\n        ...state,\n        chartData: {\n          ...state.chartData,\n          ...action.payload\n        }\n      };\n    case 'SET_CHART_PERIOD':\n      return {\n        ...state,\n        chartPeriod: action.payload\n      };\n    case 'SET_STOCK_DETAILS':\n      return {\n        ...state,\n        stockDetails: {\n          ...state.stockDetails,\n          ...action.payload\n        }\n      };\n    case 'UPDATE_SYSTEM_STATUS':\n      return {\n        ...state,\n        systemStatus: {\n          ...state.systemStatus,\n          ...action.payload,\n          lastUpdate: new Date().toISOString()\n        }\n      };\n    case 'SET_VOICE_TRANSCRIPT':\n      return {\n        ...state,\n        voiceTranscript: action.payload\n      };\n    case 'SET_VOICE_RESPONSE':\n      return {\n        ...state,\n        voiceResponse: action.payload\n      };\n    case 'SET_LISTENING':\n      return {\n        ...state,\n        isListening: action.payload\n      };\n    case 'UPDATE_PREFERENCES':\n      return {\n        ...state,\n        preferences: {\n          ...state.preferences,\n          ...action.payload\n        }\n      };\n    default:\n      return state;\n  }\n}\nexport function TradingProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(tradingReducer, initialState);\n\n  // Fetch market data periodically\n  useEffect(() => {\n    const fetchMarketData = async () => {\n      try {\n        const response = await axios.get('http://localhost:8000/api/watchlist');\n        const stocks = response.data.stocks;\n        const marketData = {};\n        const latestPrices = {};\n        stocks.forEach(stock => {\n          marketData[stock.ticker] = {\n            price: stock.close,\n            change: stock.change,\n            changePercent: stock.change_percent,\n            open: stock.open,\n            high: stock.high,\n            low: stock.low,\n            volume: stock.volume,\n            date: stock.date\n          };\n          latestPrices[stock.ticker] = stock.close;\n        });\n        dispatch({\n          type: 'SET_MARKET_DATA',\n          payload: marketData\n        });\n        dispatch({\n          type: 'SET_LATEST_PRICES',\n          payload: latestPrices\n        });\n      } catch (error) {\n        console.error('Failed to fetch market data:', error);\n      }\n    };\n\n    // Initial fetch\n    fetchMarketData();\n\n    // Set up interval for auto-refresh\n    if (state.preferences.autoRefresh) {\n      const interval = setInterval(fetchMarketData, 30000); // 30 seconds\n      return () => clearInterval(interval);\n    }\n  }, [state.preferences.autoRefresh]);\n\n  // Fetch system status\n  useEffect(() => {\n    const fetchSystemStatus = async () => {\n      try {\n        const response = await axios.get('/api/system-status');\n        dispatch({\n          type: 'UPDATE_SYSTEM_STATUS',\n          payload: response.data\n        });\n      } catch (error) {\n        console.error('Failed to fetch system status:', error);\n      }\n    };\n    fetchSystemStatus();\n    const interval = setInterval(fetchSystemStatus, 10000); // 10 seconds\n    return () => clearInterval(interval);\n  }, []);\n\n  // Fetch stock details and chart data\n  const fetchStockDetails = async ticker => {\n    try {\n      const [detailsResponse, chartResponse] = await Promise.all([axios.get(`http://localhost:8000/api/stock/${ticker}`), axios.get(`http://localhost:8000/api/stock/${ticker}/chart?period=${state.chartPeriod}`)]);\n      dispatch({\n        type: 'SET_STOCK_DETAILS',\n        payload: {\n          [ticker]: detailsResponse.data\n        }\n      });\n      dispatch({\n        type: 'SET_CHART_DATA',\n        payload: {\n          [ticker]: chartResponse.data\n        }\n      });\n    } catch (error) {\n      console.error('Failed to fetch stock details:', error);\n    }\n  };\n  const value = {\n    state,\n    dispatch,\n    actions: {\n      addSignal: signal => dispatch({\n        type: 'ADD_SIGNAL',\n        payload: signal\n      }),\n      addInsight: insight => dispatch({\n        type: 'ADD_AI_INSIGHT',\n        payload: insight\n      }),\n      setVoiceTranscript: transcript => dispatch({\n        type: 'SET_VOICE_TRANSCRIPT',\n        payload: transcript\n      }),\n      setVoiceResponse: response => dispatch({\n        type: 'SET_VOICE_RESPONSE',\n        payload: response\n      }),\n      setListening: isListening => dispatch({\n        type: 'SET_LISTENING',\n        payload: isListening\n      }),\n      updatePreferences: preferences => dispatch({\n        type: 'UPDATE_PREFERENCES',\n        payload: preferences\n      })\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(TradingContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 5\n  }, this);\n}\n_s(TradingProvider, \"GUSXxL/WUElrtHc/X73NyHNRMdw=\");\n_c = TradingProvider;\nexport function useTrading() {\n  _s2();\n  const context = useContext(TradingContext);\n  if (!context) {\n    throw new Error('useTrading must be used within a TradingProvider');\n  }\n  return context;\n}\n_s2(useTrading, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"TradingProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","axios","jsxDEV","_jsxDEV","TradingContext","initialState","watchlist","marketData","latestPrices","stockDetails","selectedStock","chartData","chartPeriod","taskStatus","dailyDataIngestion","lastExecution","nextScheduled","systemStatus","dataIngestion","emailNotifications","lastUpdate","preferences","autoRefresh","notifications","theme","voiceTranscript","voiceResponse","isListening","tradingReducer","state","action","type","payload","Date","toISOString","TradingProvider","children","_s","dispatch","fetchMarketData","response","get","stocks","data","forEach","stock","ticker","price","close","change","changePercent","change_percent","open","high","low","volume","date","error","console","interval","setInterval","clearInterval","fetchSystemStatus","fetchStockDetails","detailsResponse","chartResponse","Promise","all","value","actions","addSignal","signal","addInsight","insight","setVoiceTranscript","transcript","setVoiceResponse","setListening","updatePreferences","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTrading","_s2","context","Error","$RefreshReg$"],"sources":["/Users/manntalati/Documents/Projects/trading-assistant/frontend/src/context/TradingContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport axios from 'axios';\n\nconst TradingContext = createContext();\n\nconst initialState = {\n  // Market data - matches actual backend watchlist\n  watchlist: ['DE', 'APPL', 'AMD', 'DELL', 'FIG', 'UBER', 'MRVL', 'CSCO', 'VICI', 'PUBM', 'AVD', 'PDSB', 'QQQ', 'VOO'],\n  marketData: {},\n  latestPrices: {},\n  stockDetails: {},\n  selectedStock: null,\n  chartData: {},\n  chartPeriod: '1m',\n  \n  // Task status - reflects actual backend capabilities\n  taskStatus: {\n    dailyDataIngestion: 'idle',\n    lastExecution: null,\n    nextScheduled: null\n  },\n  \n  // System status - accurate to current backend\n  systemStatus: {\n    dataIngestion: 'idle',\n    emailNotifications: 'idle',\n    lastUpdate: null\n  },\n  \n  // User preferences\n  preferences: {\n    autoRefresh: true,\n    notifications: true,\n    theme: 'dark'\n  },\n  \n  // Voice assistant - placeholder for future implementation\n  voiceTranscript: '',\n  voiceResponse: '',\n  isListening: false\n};\n\nfunction tradingReducer(state, action) {\n  switch (action.type) {\n    case 'SET_MARKET_DATA':\n      return {\n        ...state,\n        marketData: { ...state.marketData, ...action.payload }\n      };\n      \n    case 'SET_LATEST_PRICES':\n      return {\n        ...state,\n        latestPrices: { ...state.latestPrices, ...action.payload }\n      };\n      \n    case 'UPDATE_TASK_STATUS':\n      return {\n        ...state,\n        taskStatus: { ...state.taskStatus, ...action.payload }\n      };\n      \n    case 'SET_SELECTED_STOCK':\n      return {\n        ...state,\n        selectedStock: action.payload\n      };\n      \n    case 'SET_CHART_DATA':\n      return {\n        ...state,\n        chartData: { ...state.chartData, ...action.payload }\n      };\n      \n    case 'SET_CHART_PERIOD':\n      return {\n        ...state,\n        chartPeriod: action.payload\n      };\n      \n    case 'SET_STOCK_DETAILS':\n      return {\n        ...state,\n        stockDetails: { ...state.stockDetails, ...action.payload }\n      };\n      \n    case 'UPDATE_SYSTEM_STATUS':\n      return {\n        ...state,\n        systemStatus: {\n          ...state.systemStatus,\n          ...action.payload,\n          lastUpdate: new Date().toISOString()\n        }\n      };\n      \n    case 'SET_VOICE_TRANSCRIPT':\n      return {\n        ...state,\n        voiceTranscript: action.payload\n      };\n      \n    case 'SET_VOICE_RESPONSE':\n      return {\n        ...state,\n        voiceResponse: action.payload\n      };\n      \n    case 'SET_LISTENING':\n      return {\n        ...state,\n        isListening: action.payload\n      };\n      \n    case 'UPDATE_PREFERENCES':\n      return {\n        ...state,\n        preferences: { ...state.preferences, ...action.payload }\n      };\n      \n    default:\n      return state;\n  }\n}\n\nexport function TradingProvider({ children }) {\n  const [state, dispatch] = useReducer(tradingReducer, initialState);\n\n  // Fetch market data periodically\n  useEffect(() => {\n    const fetchMarketData = async () => {\n      try {\n        const response = await axios.get('http://localhost:8000/api/watchlist');\n        const stocks = response.data.stocks;\n        \n        const marketData = {};\n        const latestPrices = {};\n        \n        stocks.forEach(stock => {\n          marketData[stock.ticker] = {\n            price: stock.close,\n            change: stock.change,\n            changePercent: stock.change_percent,\n            open: stock.open,\n            high: stock.high,\n            low: stock.low,\n            volume: stock.volume,\n            date: stock.date\n          };\n          latestPrices[stock.ticker] = stock.close;\n        });\n        \n        dispatch({ type: 'SET_MARKET_DATA', payload: marketData });\n        dispatch({ type: 'SET_LATEST_PRICES', payload: latestPrices });\n      } catch (error) {\n        console.error('Failed to fetch market data:', error);\n      }\n    };\n\n    // Initial fetch\n    fetchMarketData();\n\n    // Set up interval for auto-refresh\n    if (state.preferences.autoRefresh) {\n      const interval = setInterval(fetchMarketData, 30000); // 30 seconds\n      return () => clearInterval(interval);\n    }\n  }, [state.preferences.autoRefresh]);\n\n  // Fetch system status\n  useEffect(() => {\n    const fetchSystemStatus = async () => {\n      try {\n        const response = await axios.get('/api/system-status');\n        dispatch({ type: 'UPDATE_SYSTEM_STATUS', payload: response.data });\n      } catch (error) {\n        console.error('Failed to fetch system status:', error);\n      }\n    };\n\n    fetchSystemStatus();\n    const interval = setInterval(fetchSystemStatus, 10000); // 10 seconds\n    return () => clearInterval(interval);\n  }, []);\n\n  // Fetch stock details and chart data\n  const fetchStockDetails = async (ticker) => {\n    try {\n      const [detailsResponse, chartResponse] = await Promise.all([\n        axios.get(`http://localhost:8000/api/stock/${ticker}`),\n        axios.get(`http://localhost:8000/api/stock/${ticker}/chart?period=${state.chartPeriod}`)\n      ]);\n      \n      dispatch({ \n        type: 'SET_STOCK_DETAILS', \n        payload: { [ticker]: detailsResponse.data } \n      });\n      \n      dispatch({ \n        type: 'SET_CHART_DATA', \n        payload: { [ticker]: chartResponse.data } \n      });\n    } catch (error) {\n      console.error('Failed to fetch stock details:', error);\n    }\n  };\n\n  const value = {\n    state,\n    dispatch,\n    actions: {\n      addSignal: (signal) => dispatch({ type: 'ADD_SIGNAL', payload: signal }),\n      addInsight: (insight) => dispatch({ type: 'ADD_AI_INSIGHT', payload: insight }),\n      setVoiceTranscript: (transcript) => dispatch({ type: 'SET_VOICE_TRANSCRIPT', payload: transcript }),\n      setVoiceResponse: (response) => dispatch({ type: 'SET_VOICE_RESPONSE', payload: response }),\n      setListening: (isListening) => dispatch({ type: 'SET_LISTENING', payload: isListening }),\n      updatePreferences: (preferences) => dispatch({ type: 'UPDATE_PREFERENCES', payload: preferences })\n    }\n  };\n\n  return (\n    <TradingContext.Provider value={value}>\n      {children}\n    </TradingContext.Provider>\n  );\n}\n\nexport function useTrading() {\n  const context = useContext(TradingContext);\n  if (!context) {\n    throw new Error('useTrading must be used within a TradingProvider');\n  }\n  return context;\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}