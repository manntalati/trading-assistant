{"ast":null,"code":"var _jsxFileName = \"/Users/manntalati/Documents/Projects/trading-assistant/frontend/src/context/TradingContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TradingContext = /*#__PURE__*/createContext();\nconst initialState = {\n  // Market data - matches actual backend watchlist\n  watchlist: ['DE', 'APPL', 'AMD', 'DELL', 'FIG', 'UBER', 'MRVL', 'CSCO', 'VICI', 'PUBM', 'AVD', 'PDSB', 'QQQ', 'VOO'],\n  marketData: {},\n  latestPrices: {},\n  stockDetails: {},\n  selectedStock: null,\n  chartData: {},\n  chartPeriod: '1m',\n  // Task status - reflects actual backend capabilities\n  taskStatus: {\n    dailyDataIngestion: 'idle',\n    lastExecution: null,\n    nextScheduled: null\n  },\n  // System status - accurate to current backend\n  systemStatus: {\n    dataIngestion: 'idle',\n    emailNotifications: 'idle',\n    lastUpdate: null\n  },\n  // User preferences\n  preferences: {\n    autoRefresh: true,\n    notifications: true,\n    theme: 'dark'\n  },\n  // Voice assistant - placeholder for future implementation\n  voiceTranscript: '',\n  voiceResponse: '',\n  isListening: false\n};\nfunction tradingReducer(state, action) {\n  switch (action.type) {\n    case 'SET_MARKET_DATA':\n      return {\n        ...state,\n        marketData: {\n          ...state.marketData,\n          ...action.payload\n        }\n      };\n    case 'SET_LATEST_PRICES':\n      return {\n        ...state,\n        latestPrices: {\n          ...state.latestPrices,\n          ...action.payload\n        }\n      };\n    case 'UPDATE_TASK_STATUS':\n      return {\n        ...state,\n        taskStatus: {\n          ...state.taskStatus,\n          ...action.payload\n        }\n      };\n    case 'SET_SELECTED_STOCK':\n      return {\n        ...state,\n        selectedStock: action.payload\n      };\n    case 'SET_CHART_DATA':\n      return {\n        ...state,\n        chartData: {\n          ...state.chartData,\n          ...action.payload\n        }\n      };\n    case 'SET_CHART_PERIOD':\n      return {\n        ...state,\n        chartPeriod: action.payload\n      };\n    case 'SET_STOCK_DETAILS':\n      return {\n        ...state,\n        stockDetails: {\n          ...state.stockDetails,\n          ...action.payload\n        }\n      };\n    case 'UPDATE_SYSTEM_STATUS':\n      return {\n        ...state,\n        systemStatus: {\n          ...state.systemStatus,\n          ...action.payload,\n          lastUpdate: new Date().toISOString()\n        }\n      };\n    case 'SET_VOICE_TRANSCRIPT':\n      return {\n        ...state,\n        voiceTranscript: action.payload\n      };\n    case 'SET_VOICE_RESPONSE':\n      return {\n        ...state,\n        voiceResponse: action.payload\n      };\n    case 'SET_LISTENING':\n      return {\n        ...state,\n        isListening: action.payload\n      };\n    case 'UPDATE_PREFERENCES':\n      return {\n        ...state,\n        preferences: {\n          ...state.preferences,\n          ...action.payload\n        }\n      };\n    default:\n      return state;\n  }\n}\nexport function TradingProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(tradingReducer, initialState);\n\n  // Fetch market data periodically\n  useEffect(() => {\n    const fetchMarketData = async () => {\n      try {\n        // Fetch from your backend API\n        const response = await axios.get('/api/market-data');\n        dispatch({\n          type: 'SET_MARKET_DATA',\n          payload: response.data\n        });\n      } catch (error) {\n        console.error('Failed to fetch market data:', error);\n      }\n    };\n\n    // Initial fetch\n    fetchMarketData();\n\n    // Set up interval for auto-refresh\n    if (state.preferences.autoRefresh) {\n      const interval = setInterval(fetchMarketData, 30000); // 30 seconds\n      return () => clearInterval(interval);\n    }\n  }, [state.preferences.autoRefresh]);\n\n  // Fetch system status\n  useEffect(() => {\n    const fetchSystemStatus = async () => {\n      try {\n        const response = await axios.get('/api/system-status');\n        dispatch({\n          type: 'UPDATE_SYSTEM_STATUS',\n          payload: response.data\n        });\n      } catch (error) {\n        console.error('Failed to fetch system status:', error);\n      }\n    };\n    fetchSystemStatus();\n    const interval = setInterval(fetchSystemStatus, 10000); // 10 seconds\n    return () => clearInterval(interval);\n  }, []);\n\n  // Mock data for development\n  useEffect(() => {\n    // Simulate real-time price updates\n    const mockPriceUpdates = setInterval(() => {\n      const mockPrices = {};\n      state.watchlist.forEach(ticker => {\n        const currentPrice = 100 + Math.random() * 200;\n        const change = (Math.random() - 0.5) * 10;\n        mockPrices[ticker] = {\n          price: currentPrice.toFixed(2),\n          change: change.toFixed(2),\n          changePercent: (change / currentPrice * 100).toFixed(2),\n          volume: Math.floor(Math.random() * 1000000)\n        };\n      });\n      dispatch({\n        type: 'SET_LATEST_PRICES',\n        payload: mockPrices\n      });\n    }, 5000);\n    return () => clearInterval(mockPriceUpdates);\n  }, [state.watchlist]);\n  const value = {\n    state,\n    dispatch,\n    actions: {\n      addSignal: signal => dispatch({\n        type: 'ADD_SIGNAL',\n        payload: signal\n      }),\n      addInsight: insight => dispatch({\n        type: 'ADD_AI_INSIGHT',\n        payload: insight\n      }),\n      setVoiceTranscript: transcript => dispatch({\n        type: 'SET_VOICE_TRANSCRIPT',\n        payload: transcript\n      }),\n      setVoiceResponse: response => dispatch({\n        type: 'SET_VOICE_RESPONSE',\n        payload: response\n      }),\n      setListening: isListening => dispatch({\n        type: 'SET_LISTENING',\n        payload: isListening\n      }),\n      updatePreferences: preferences => dispatch({\n        type: 'UPDATE_PREFERENCES',\n        payload: preferences\n      })\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(TradingContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 5\n  }, this);\n}\n_s(TradingProvider, \"s3jE+e7wLGXN/2uWqdAG2uRSMfA=\");\n_c = TradingProvider;\nexport function useTrading() {\n  _s2();\n  const context = useContext(TradingContext);\n  if (!context) {\n    throw new Error('useTrading must be used within a TradingProvider');\n  }\n  return context;\n}\n_s2(useTrading, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"TradingProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","axios","jsxDEV","_jsxDEV","TradingContext","initialState","watchlist","marketData","latestPrices","stockDetails","selectedStock","chartData","chartPeriod","taskStatus","dailyDataIngestion","lastExecution","nextScheduled","systemStatus","dataIngestion","emailNotifications","lastUpdate","preferences","autoRefresh","notifications","theme","voiceTranscript","voiceResponse","isListening","tradingReducer","state","action","type","payload","Date","toISOString","TradingProvider","children","_s","dispatch","fetchMarketData","response","get","data","error","console","interval","setInterval","clearInterval","fetchSystemStatus","mockPriceUpdates","mockPrices","forEach","ticker","currentPrice","Math","random","change","price","toFixed","changePercent","volume","floor","value","actions","addSignal","signal","addInsight","insight","setVoiceTranscript","transcript","setVoiceResponse","setListening","updatePreferences","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTrading","_s2","context","Error","$RefreshReg$"],"sources":["/Users/manntalati/Documents/Projects/trading-assistant/frontend/src/context/TradingContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport axios from 'axios';\n\nconst TradingContext = createContext();\n\nconst initialState = {\n  // Market data - matches actual backend watchlist\n  watchlist: ['DE', 'APPL', 'AMD', 'DELL', 'FIG', 'UBER', 'MRVL', 'CSCO', 'VICI', 'PUBM', 'AVD', 'PDSB', 'QQQ', 'VOO'],\n  marketData: {},\n  latestPrices: {},\n  stockDetails: {},\n  selectedStock: null,\n  chartData: {},\n  chartPeriod: '1m',\n  \n  // Task status - reflects actual backend capabilities\n  taskStatus: {\n    dailyDataIngestion: 'idle',\n    lastExecution: null,\n    nextScheduled: null\n  },\n  \n  // System status - accurate to current backend\n  systemStatus: {\n    dataIngestion: 'idle',\n    emailNotifications: 'idle',\n    lastUpdate: null\n  },\n  \n  // User preferences\n  preferences: {\n    autoRefresh: true,\n    notifications: true,\n    theme: 'dark'\n  },\n  \n  // Voice assistant - placeholder for future implementation\n  voiceTranscript: '',\n  voiceResponse: '',\n  isListening: false\n};\n\nfunction tradingReducer(state, action) {\n  switch (action.type) {\n    case 'SET_MARKET_DATA':\n      return {\n        ...state,\n        marketData: { ...state.marketData, ...action.payload }\n      };\n      \n    case 'SET_LATEST_PRICES':\n      return {\n        ...state,\n        latestPrices: { ...state.latestPrices, ...action.payload }\n      };\n      \n    case 'UPDATE_TASK_STATUS':\n      return {\n        ...state,\n        taskStatus: { ...state.taskStatus, ...action.payload }\n      };\n      \n    case 'SET_SELECTED_STOCK':\n      return {\n        ...state,\n        selectedStock: action.payload\n      };\n      \n    case 'SET_CHART_DATA':\n      return {\n        ...state,\n        chartData: { ...state.chartData, ...action.payload }\n      };\n      \n    case 'SET_CHART_PERIOD':\n      return {\n        ...state,\n        chartPeriod: action.payload\n      };\n      \n    case 'SET_STOCK_DETAILS':\n      return {\n        ...state,\n        stockDetails: { ...state.stockDetails, ...action.payload }\n      };\n      \n    case 'UPDATE_SYSTEM_STATUS':\n      return {\n        ...state,\n        systemStatus: {\n          ...state.systemStatus,\n          ...action.payload,\n          lastUpdate: new Date().toISOString()\n        }\n      };\n      \n    case 'SET_VOICE_TRANSCRIPT':\n      return {\n        ...state,\n        voiceTranscript: action.payload\n      };\n      \n    case 'SET_VOICE_RESPONSE':\n      return {\n        ...state,\n        voiceResponse: action.payload\n      };\n      \n    case 'SET_LISTENING':\n      return {\n        ...state,\n        isListening: action.payload\n      };\n      \n    case 'UPDATE_PREFERENCES':\n      return {\n        ...state,\n        preferences: { ...state.preferences, ...action.payload }\n      };\n      \n    default:\n      return state;\n  }\n}\n\nexport function TradingProvider({ children }) {\n  const [state, dispatch] = useReducer(tradingReducer, initialState);\n\n  // Fetch market data periodically\n  useEffect(() => {\n    const fetchMarketData = async () => {\n      try {\n        // Fetch from your backend API\n        const response = await axios.get('/api/market-data');\n        dispatch({ type: 'SET_MARKET_DATA', payload: response.data });\n      } catch (error) {\n        console.error('Failed to fetch market data:', error);\n      }\n    };\n\n    // Initial fetch\n    fetchMarketData();\n\n    // Set up interval for auto-refresh\n    if (state.preferences.autoRefresh) {\n      const interval = setInterval(fetchMarketData, 30000); // 30 seconds\n      return () => clearInterval(interval);\n    }\n  }, [state.preferences.autoRefresh]);\n\n  // Fetch system status\n  useEffect(() => {\n    const fetchSystemStatus = async () => {\n      try {\n        const response = await axios.get('/api/system-status');\n        dispatch({ type: 'UPDATE_SYSTEM_STATUS', payload: response.data });\n      } catch (error) {\n        console.error('Failed to fetch system status:', error);\n      }\n    };\n\n    fetchSystemStatus();\n    const interval = setInterval(fetchSystemStatus, 10000); // 10 seconds\n    return () => clearInterval(interval);\n  }, []);\n\n  // Mock data for development\n  useEffect(() => {\n    // Simulate real-time price updates\n    const mockPriceUpdates = setInterval(() => {\n      const mockPrices = {};\n      state.watchlist.forEach(ticker => {\n        const currentPrice = 100 + Math.random() * 200;\n        const change = (Math.random() - 0.5) * 10;\n        mockPrices[ticker] = {\n          price: currentPrice.toFixed(2),\n          change: change.toFixed(2),\n          changePercent: ((change / currentPrice) * 100).toFixed(2),\n          volume: Math.floor(Math.random() * 1000000)\n        };\n      });\n      dispatch({ type: 'SET_LATEST_PRICES', payload: mockPrices });\n    }, 5000);\n\n    return () => clearInterval(mockPriceUpdates);\n  }, [state.watchlist]);\n\n  const value = {\n    state,\n    dispatch,\n    actions: {\n      addSignal: (signal) => dispatch({ type: 'ADD_SIGNAL', payload: signal }),\n      addInsight: (insight) => dispatch({ type: 'ADD_AI_INSIGHT', payload: insight }),\n      setVoiceTranscript: (transcript) => dispatch({ type: 'SET_VOICE_TRANSCRIPT', payload: transcript }),\n      setVoiceResponse: (response) => dispatch({ type: 'SET_VOICE_RESPONSE', payload: response }),\n      setListening: (isListening) => dispatch({ type: 'SET_LISTENING', payload: isListening }),\n      updatePreferences: (preferences) => dispatch({ type: 'UPDATE_PREFERENCES', payload: preferences })\n    }\n  };\n\n  return (\n    <TradingContext.Provider value={value}>\n      {children}\n    </TradingContext.Provider>\n  );\n}\n\nexport function useTrading() {\n  const context = useContext(TradingContext);\n  if (!context) {\n    throw new Error('useTrading must be used within a TradingProvider');\n  }\n  return context;\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}