{"ast":null,"code":"import React,{createContext,useContext,useReducer,useEffect}from'react';import axios from'axios';import{jsx as _jsx}from\"react/jsx-runtime\";const TradingContext=/*#__PURE__*/createContext();const initialState={// Market data\nwatchlist:['DE','APPL','AMD','DELL','FIG','UBER','MRVL','CSCO','VICI','PUBM','AVD','PDSB','QQQ','VOO'],marketData:{},latestPrices:{},// Trading signals\nsignals:[],aiInsights:[],// System status\nsystemStatus:{dataIngestion:'idle',aiAgent:'idle',voiceService:'idle',lastUpdate:null},// User preferences\npreferences:{autoRefresh:true,notifications:true,theme:'dark'},// Voice assistant\nvoiceTranscript:'',voiceResponse:'',isListening:false};function tradingReducer(state,action){switch(action.type){case'SET_MARKET_DATA':return{...state,marketData:{...state.marketData,...action.payload}};case'SET_LATEST_PRICES':return{...state,latestPrices:{...state.latestPrices,...action.payload}};case'ADD_SIGNAL':return{...state,signals:[action.payload,...state.signals.slice(0,49)]// Keep last 50\n};case'ADD_AI_INSIGHT':return{...state,aiInsights:[action.payload,...state.aiInsights.slice(0,19)]// Keep last 20\n};case'UPDATE_SYSTEM_STATUS':return{...state,systemStatus:{...state.systemStatus,...action.payload,lastUpdate:new Date().toISOString()}};case'SET_VOICE_TRANSCRIPT':return{...state,voiceTranscript:action.payload};case'SET_VOICE_RESPONSE':return{...state,voiceResponse:action.payload};case'SET_LISTENING':return{...state,isListening:action.payload};case'UPDATE_PREFERENCES':return{...state,preferences:{...state.preferences,...action.payload}};default:return state;}}export function TradingProvider(_ref){let{children}=_ref;const[state,dispatch]=useReducer(tradingReducer,initialState);// Fetch market data periodically\nuseEffect(()=>{const fetchMarketData=async()=>{try{// Fetch from your backend API\nconst response=await axios.get('/api/market-data');dispatch({type:'SET_MARKET_DATA',payload:response.data});}catch(error){console.error('Failed to fetch market data:',error);}};// Initial fetch\nfetchMarketData();// Set up interval for auto-refresh\nif(state.preferences.autoRefresh){const interval=setInterval(fetchMarketData,30000);// 30 seconds\nreturn()=>clearInterval(interval);}},[state.preferences.autoRefresh]);// Fetch system status\nuseEffect(()=>{const fetchSystemStatus=async()=>{try{const response=await axios.get('/api/system-status');dispatch({type:'UPDATE_SYSTEM_STATUS',payload:response.data});}catch(error){console.error('Failed to fetch system status:',error);}};fetchSystemStatus();const interval=setInterval(fetchSystemStatus,10000);// 10 seconds\nreturn()=>clearInterval(interval);},[]);// Mock data for development\nuseEffect(()=>{// Simulate real-time price updates\nconst mockPriceUpdates=setInterval(()=>{const mockPrices={};state.watchlist.forEach(ticker=>{const currentPrice=100+Math.random()*200;const change=(Math.random()-0.5)*10;mockPrices[ticker]={price:currentPrice.toFixed(2),change:change.toFixed(2),changePercent:(change/currentPrice*100).toFixed(2),volume:Math.floor(Math.random()*1000000)};});dispatch({type:'SET_LATEST_PRICES',payload:mockPrices});},5000);return()=>clearInterval(mockPriceUpdates);},[state.watchlist]);const value={state,dispatch,actions:{addSignal:signal=>dispatch({type:'ADD_SIGNAL',payload:signal}),addInsight:insight=>dispatch({type:'ADD_AI_INSIGHT',payload:insight}),setVoiceTranscript:transcript=>dispatch({type:'SET_VOICE_TRANSCRIPT',payload:transcript}),setVoiceResponse:response=>dispatch({type:'SET_VOICE_RESPONSE',payload:response}),setListening:isListening=>dispatch({type:'SET_LISTENING',payload:isListening}),updatePreferences:preferences=>dispatch({type:'UPDATE_PREFERENCES',payload:preferences})}};return/*#__PURE__*/_jsx(TradingContext.Provider,{value:value,children:children});}export function useTrading(){const context=useContext(TradingContext);if(!context){throw new Error('useTrading must be used within a TradingProvider');}return context;}","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","axios","jsx","_jsx","TradingContext","initialState","watchlist","marketData","latestPrices","signals","aiInsights","systemStatus","dataIngestion","aiAgent","voiceService","lastUpdate","preferences","autoRefresh","notifications","theme","voiceTranscript","voiceResponse","isListening","tradingReducer","state","action","type","payload","slice","Date","toISOString","TradingProvider","_ref","children","dispatch","fetchMarketData","response","get","data","error","console","interval","setInterval","clearInterval","fetchSystemStatus","mockPriceUpdates","mockPrices","forEach","ticker","currentPrice","Math","random","change","price","toFixed","changePercent","volume","floor","value","actions","addSignal","signal","addInsight","insight","setVoiceTranscript","transcript","setVoiceResponse","setListening","updatePreferences","Provider","useTrading","context","Error"],"sources":["/Users/manntalati/Documents/Projects/trading-assistant/frontend/src/context/TradingContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport axios from 'axios';\n\nconst TradingContext = createContext();\n\nconst initialState = {\n  // Market data\n  watchlist: ['DE', 'APPL', 'AMD', 'DELL', 'FIG', 'UBER', 'MRVL', 'CSCO', 'VICI', 'PUBM', 'AVD', 'PDSB', 'QQQ', 'VOO'],\n  marketData: {},\n  latestPrices: {},\n  \n  // Trading signals\n  signals: [],\n  aiInsights: [],\n  \n  // System status\n  systemStatus: {\n    dataIngestion: 'idle',\n    aiAgent: 'idle',\n    voiceService: 'idle',\n    lastUpdate: null\n  },\n  \n  // User preferences\n  preferences: {\n    autoRefresh: true,\n    notifications: true,\n    theme: 'dark'\n  },\n  \n  // Voice assistant\n  voiceTranscript: '',\n  voiceResponse: '',\n  isListening: false\n};\n\nfunction tradingReducer(state, action) {\n  switch (action.type) {\n    case 'SET_MARKET_DATA':\n      return {\n        ...state,\n        marketData: { ...state.marketData, ...action.payload }\n      };\n      \n    case 'SET_LATEST_PRICES':\n      return {\n        ...state,\n        latestPrices: { ...state.latestPrices, ...action.payload }\n      };\n      \n    case 'ADD_SIGNAL':\n      return {\n        ...state,\n        signals: [action.payload, ...state.signals.slice(0, 49)] // Keep last 50\n      };\n      \n    case 'ADD_AI_INSIGHT':\n      return {\n        ...state,\n        aiInsights: [action.payload, ...state.aiInsights.slice(0, 19)] // Keep last 20\n      };\n      \n    case 'UPDATE_SYSTEM_STATUS':\n      return {\n        ...state,\n        systemStatus: {\n          ...state.systemStatus,\n          ...action.payload,\n          lastUpdate: new Date().toISOString()\n        }\n      };\n      \n    case 'SET_VOICE_TRANSCRIPT':\n      return {\n        ...state,\n        voiceTranscript: action.payload\n      };\n      \n    case 'SET_VOICE_RESPONSE':\n      return {\n        ...state,\n        voiceResponse: action.payload\n      };\n      \n    case 'SET_LISTENING':\n      return {\n        ...state,\n        isListening: action.payload\n      };\n      \n    case 'UPDATE_PREFERENCES':\n      return {\n        ...state,\n        preferences: { ...state.preferences, ...action.payload }\n      };\n      \n    default:\n      return state;\n  }\n}\n\nexport function TradingProvider({ children }) {\n  const [state, dispatch] = useReducer(tradingReducer, initialState);\n\n  // Fetch market data periodically\n  useEffect(() => {\n    const fetchMarketData = async () => {\n      try {\n        // Fetch from your backend API\n        const response = await axios.get('/api/market-data');\n        dispatch({ type: 'SET_MARKET_DATA', payload: response.data });\n      } catch (error) {\n        console.error('Failed to fetch market data:', error);\n      }\n    };\n\n    // Initial fetch\n    fetchMarketData();\n\n    // Set up interval for auto-refresh\n    if (state.preferences.autoRefresh) {\n      const interval = setInterval(fetchMarketData, 30000); // 30 seconds\n      return () => clearInterval(interval);\n    }\n  }, [state.preferences.autoRefresh]);\n\n  // Fetch system status\n  useEffect(() => {\n    const fetchSystemStatus = async () => {\n      try {\n        const response = await axios.get('/api/system-status');\n        dispatch({ type: 'UPDATE_SYSTEM_STATUS', payload: response.data });\n      } catch (error) {\n        console.error('Failed to fetch system status:', error);\n      }\n    };\n\n    fetchSystemStatus();\n    const interval = setInterval(fetchSystemStatus, 10000); // 10 seconds\n    return () => clearInterval(interval);\n  }, []);\n\n  // Mock data for development\n  useEffect(() => {\n    // Simulate real-time price updates\n    const mockPriceUpdates = setInterval(() => {\n      const mockPrices = {};\n      state.watchlist.forEach(ticker => {\n        const currentPrice = 100 + Math.random() * 200;\n        const change = (Math.random() - 0.5) * 10;\n        mockPrices[ticker] = {\n          price: currentPrice.toFixed(2),\n          change: change.toFixed(2),\n          changePercent: ((change / currentPrice) * 100).toFixed(2),\n          volume: Math.floor(Math.random() * 1000000)\n        };\n      });\n      dispatch({ type: 'SET_LATEST_PRICES', payload: mockPrices });\n    }, 5000);\n\n    return () => clearInterval(mockPriceUpdates);\n  }, [state.watchlist]);\n\n  const value = {\n    state,\n    dispatch,\n    actions: {\n      addSignal: (signal) => dispatch({ type: 'ADD_SIGNAL', payload: signal }),\n      addInsight: (insight) => dispatch({ type: 'ADD_AI_INSIGHT', payload: insight }),\n      setVoiceTranscript: (transcript) => dispatch({ type: 'SET_VOICE_TRANSCRIPT', payload: transcript }),\n      setVoiceResponse: (response) => dispatch({ type: 'SET_VOICE_RESPONSE', payload: response }),\n      setListening: (isListening) => dispatch({ type: 'SET_LISTENING', payload: isListening }),\n      updatePreferences: (preferences) => dispatch({ type: 'UPDATE_PREFERENCES', payload: preferences })\n    }\n  };\n\n  return (\n    <TradingContext.Provider value={value}>\n      {children}\n    </TradingContext.Provider>\n  );\n}\n\nexport function useTrading() {\n  const context = useContext(TradingContext);\n  if (!context) {\n    throw new Error('useTrading must be used within a TradingProvider');\n  }\n  return context;\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}